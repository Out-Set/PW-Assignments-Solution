What is the Collection framework in Java?
=========================================
Solution:
---------
 -> The Collection framework in Java is a unified architecture for storing and manipulating groups of objects. 
 -> It provides various interfaces, implementations (classes), and algorithms to handle data collections. 
 -> This framework is part of the java.util package and provides a more efficient way to work with groups of objects than older methods like arrays.
 
   Benefits of the Collection Framework:
   -------------------------------------
    -> Reduces programming effort: Provides ready-made implementations for standard data structures like lists, sets, and maps.
    -> Increases performance: Efficient and optimized implementations.
    -> Interoperability: Collection classes can be easily used in different types of applications.
    -> Thread-safety: The framework also provides synchronized versions of collections for multi-threaded applications (e.g., Collections.synchronizedList).


What is the difference between ArrayList and LinkedList?
========================================================
Solution:
---------
 -> Both ArrayList and LinkedList are implementations of the List interface in Java, but they differ in their internal structure and performance characteristics.

    Underlying Data Structure:
    --------------------------
     ArrayList: Internally uses a dynamic array to store the elements.
     LinkedList: Internally uses a doubly linked list to store the elements.
     ______________________________________________________________________________________________________________
     | Feature	        |     ArrayList	                          |    LinkedList                                 |
     --------------------------------------------------------------------------------------------------------------
     | Data Structure	|     Dynamic array	                  |    Doubly linked list                         |
     --------------------------------------------------------------------------------------------------------------
     | Insertion	|     O(1) (end), O(n) (beginning/middle) |    O(1) (beginning/end), O(n) (middle)        |
     --------------------------------------------------------------------------------------------------------------
     | Deletion	        |     O(n)	                          |    O(1) (for direct reference), O(n) (search) |
     --------------------------------------------------------------------------------------------------------------
     | Access	        |     O(1)	                          |    O(n)                                       |
     --------------------------------------------------------------------------------------------------------------
     | Memory	        |     Less memory, as no extra pointers	  |    More memory due to additional pointers     |
     --------------------------------------------------------------------------------------------------------------
     | Best Use Case	|     Frequent read/access operations	  |    Frequent insertions/deletions              |
     --------------------------------------------------------------------------------------------------------------


What is the difference between Iterator and ListIterator?
=========================================================
Solution:
---------
 -> Both Iterator and ListIterator are used to traverse elements in a collection in Java.
 -> But they have key differences in terms of functionality and the types of collections they work with.
  ________________________________________________________________________________________________________________________
  | Feature	            |  Iterator	                           |   ListIterator                                       |
  -------------------------------------------------------------------------------------------------------------------------
  | Supported Collections   |  Any collection (Set, List, Queue)   |   Only List                                          |
  -------------------------------------------------------------------------------------------------------------------------
  | Traversal Direction	    |  Forward only	                   |   Forward and backward                               |
  -------------------------------------------------------------------------------------------------------------------------
  | Get Current Index	    |  Not supported	                   |   Supported (nextIndex(), previousIndex())           |
  -------------------------------------------------------------------------------------------------------------------------
  | Add Elements	    |  Not allowed                         |   Allowed (add(E e))                                 |
  -------------------------------------------------------------------------------------------------------------------------
  | Modify Elements	    |  Not allowed	                   |   Allowed (set(E e))                                 |
  -------------------------------------------------------------------------------------------------------------------------
  | Remove Elements	    |  Allowed (remove())	           |   Allowed (remove())                                 |
  -------------------------------------------------------------------------------------------------------------------------
  | Starting Position	    |  Always at the beginning	           |   Can start at any index (listIterator(int index))   |
  -------------------------------------------------------------------------------------------------------------------------


What is the difference between Iterator and Enumeration?
========================================================
Solution:
---------
 -> Both Iterator and Enumeration are interfaces used to traverse collections in Java.
 -> But they have several key differences in terms of functionality, usage, and design philosophy.

   Enumeration: 
   ------------
    -> Introduced in JDK 1.0, it is the oldest interface for traversing elements in legacy classes like Vector and Hashtable. 
    -> It is mainly used in older, pre-Collections Framework APIs.
    -> Enumeration is a simpler, outdated interface primarily used in legacy classes like Vector and Hashtable. 
    -> It does not support element removal or modification during traversal and lacks fail-fast behavior.
   
   Iterator:
   ---------
    -> Introduced in JDK 1.2 as part of the Java Collections Framework. 
    -> It provides more advanced and flexible ways of traversing collections and works with all types of collections (List, Set, Queue, etc.).
    -> Iterator is the modern, flexible alternative introduced with the Java Collections Framework. 
    -> It allows for element removal and supports fail-fast behavior, making it more suitable for modern collections and concurrent programming.


What is the difference between List and Set?
============================================
Solution:
---------
 -> List and Set are two key interfaces in the Java Collections Framework, and they differ in their structure, behavior, and use cases. 
    ______________________________________________________________________________________________________________________________________________________
    | Feature	              |    List	                                                  |   Set                                                         |
    -------------------------------------------------------------------------------------------------------------------------------------------------------
    | Order of Elements	      |    Maintains insertion order	                          |   No guaranteed order (HashSet),                              |
    |                         |                                                           |   insertion order (LinkedHashSet), or sorted order (TreeSet)  |
    -------------------------------------------------------------------------------------------------------------------------------------------------------
    | Duplicates	      |    Allows duplicates	                                  |   No duplicates allowed                                       |
    -------------------------------------------------------------------------------------------------------------------------------------------------------
    | Index-Based Access      |    Supports index-based access (e.g., list.get(index))	  |   No index-based access                                       |
    -------------------------------------------------------------------------------------------------------------------------------------------------------
    | Null Elements	      |    Allows multiple null elements	                  |   Allows only one null element                                |
    -------------------------------------------------------------------------------------------------------------------------------------------------------
    | Performance	      |    Fast random access in ArrayList, slower in LinkedList  |   Fast operations in HashSet, sorted order in TreeSet         |
    -------------------------------------------------------------------------------------------------------------------------------------------------------
    | Common Implementations  |    ArrayList, LinkedList, Vector	                  |   HashSet, LinkedHashSet, TreeSet                             |
    -------------------------------------------------------------------------------------------------------------------------------------------------------
    | Best Use Case	      |    Ordered collections with possible duplicates	          |   Unique collections with no duplicates                       |
    -------------------------------------------------------------------------------------------------------------------------------------------------------


What is the difference between HashSet and TreeSet?
===================================================
Solution:
---------
 -> HashSet and TreeSet are two implementations of the Set interface in Java, but they differ in how they store and manage elements. 
   _____________________________________________________________________________________________________________________________________
   | Feature	                  |   HashSet	                             | TreeSet                                                 |
   -------------------------------------------------------------------------------------------------------------------------------------
   | Underlying Data Structure	  |   Hash Table (HashMap)	             | Red-Black Tree                                          |
   -------------------------------------------------------------------------------------------------------------------------------------
   | Order of Elements	          |   No order	                             | Sorted order (natural or custom)                        |
   -------------------------------------------------------------------------------------------------------------------------------------
   | Performance	          |   O(1) for add, remove, contains         | O(log n) for add, remove, contains                      |
   -------------------------------------------------------------------------------------------------------------------------------------
   | Null Elements	          |   Allows one null element                | Does not allow null elements                            |
   -------------------------------------------------------------------------------------------------------------------------------------
   | Sorting	                  |   No sorting	                     | Elements are sorted (natural/custom order)              |
   -------------------------------------------------------------------------------------------------------------------------------------
   | Use Case	                  |   Fast access without concern for order  | Need sorted elements                                    |
   -------------------------------------------------------------------------------------------------------------------------------------
   | Comparison of Elements	  |   Based on hash code and equals method   | Based on Comparable or Comparator                       |
   -------------------------------------------------------------------------------------------------------------------------------------
   | Navigational Methods	  |   Not supported	                     | Supports methods like first(), last(), headSet(), etc.  |
   -------------------------------------------------------------------------------------------------------------------------------------
   | Synchronization	          |   Not synchronized                       | Not synchronized                                        |
   -------------------------------------------------------------------------------------------------------------------------------------


What is the difference between Array and ArrayList?
===================================================
Solution:
---------
 -> Array and ArrayList are both used to store collections of elements in Java, but they differ in terms of structure, flexibility, and functionality.
    __________________________________________________________________________________________________________________________
    | Feature	                  | Array	                          | ArrayList                                        |
    --------------------------------------------------------------------------------------------------------------------------
    | Size	                  | Fixed size	                          | Dynamic (resizable)                              |
    --------------------------------------------------------------------------------------------------------------------------
    | Data Types Supported        | Primitives and objects	          | Objects only (no primitives)                     |
    --------------------------------------------------------------------------------------------------------------------------
    | Performance	          | Faster for fixed-size collections	  | Slightly slower due to resizing                  |
    --------------------------------------------------------------------------------------------------------------------------
    | Flexibility	          | Inflexible (cannot resize)	          | Flexible (can grow/shrink)                       |
    --------------------------------------------------------------------------------------------------------------------------
    | Built-in Methods	          | No built-in methods for add/remove    | Provides rich built-in methods                   |
    --------------------------------------------------------------------------------------------------------------------------
    | Memory Usage	          | More efficient in memory	          | Uses more memory due to resizing                 |
    --------------------------------------------------------------------------------------------------------------------------
    | Initialization	          | Must declare size at initialization   | Size is dynamic                                  |
    --------------------------------------------------------------------------------------------------------------------------
    | Iteration	                  | For loop, enhanced for loop	          | For loop, enhanced for loop, Iterator            |
    --------------------------------------------------------------------------------------------------------------------------
    | Multi-dimensional Arrays    | Supported	                          | Not directly supported (can use list of lists)   |
    --------------------------------------------------------------------------------------------------------------------------
    | Generics	                  | Not supported	                  | Supports generics                                |
    --------------------------------------------------------------------------------------------------------------------------
    | Thread Safety	          | Not thread-safe	                  | Not thread-safe                                  |
    --------------------------------------------------------------------------------------------------------------------------

What is JDBC in Java?
=====================
Solution:
---------
 -> JDBC (Java Database Connectivity) is an API (Application Programming Interface) in Java that allows Java applications to interact with databases. 
 -> It provides a standard method to connect to databases, execute SQL queries, retrieve results, and manage database connections. 
 -> JDBC is part of the Java Standard Edition (Java SE) platform, and it's used to handle relational databases like MySQL, Oracle, PostgreSQL, SQL Server, and others.
 -> JDBC is a powerful and flexible API in Java for database interaction. 
 -> It allows developers to connect, query, update, and manage relational databases directly from Java applications. 
 -> Although it involves manual coding and handling of connections, it provides a low-level API for fine-grained control over database operations.


What is DriverManager in JDBC?
==============================
Solution:
---------
 -> In JDBC, DriverManager is a class that plays a key role in managing the database drivers and establishing connections between a Java application and a database. 
 -> It is part of the java.sql package and acts as a central management layer that connects an application to a specific database through the appropriate JDBC driver.
  Responsibilities of DriverManager:
  ----------------------------------
   -> Loading JDBC Drivers
   -> Establishing a Connection
   -> Managing Multiple Drivers
   -> Connection Management


Which data types are used for storing the image and file in the database table?
===============================================================================
Solution:
---------
 -> When storing images and files in a database, the appropriate data types vary depending on the database system you're using. 
 -> Typically, databases offer special data types to handle large binary data. These data types allow storing binary data such as images, videos, or files.

   Common Data Types for Storing Images and Files in Databases:
   ------------------------------------------------------------
    1. BLOB (Binary Large Object):
    ------------------------------
     -> BLOB is the most commonly used data type for storing binary data such as images, videos, and files.
     -> BLOBs are capable of storing large amounts of data, such as images or multimedia files, as binary streams.
     -> BLOB data is treated as binary, meaning it does not need to adhere to any character encoding (like text data types).
     
    2. TEXT or CLOB (Character Large Object):
    -----------------------------------------
     -> CLOB is used to store large text data (e.g., documents, large text files). This data type is used when you need to store large amounts of textual data.
     -> Like BLOBs, CLOBs are designed for large amounts of data, but they store text rather than binary data.
     
  Data Types for Different Databases:
  -----------------------------------
    __________________________________________________________________________________
    | Database	     | Image & File Data Types	     |   Text Data Types (for files) |
    ----------------------------------------------------------------------------------
    | MySQL	     | BLOB, MEDIUMBLOB, LONGBLOB    |   TEXT, MEDIUMTEXT, LONGTEXT  |
    ----------------------------------------------------------------------------------
    | PostgreSQL     | BYTEA	                     |   TEXT                        |
    ----------------------------------------------------------------------------------
    | Oracle         | BLOB                          |   CLOB                        |
    ----------------------------------------------------------------------------------
    | SQL Server     | VARBINARY(MAX)	             |   VARCHAR(MAX)                |
    ----------------------------------------------------------------------------------


